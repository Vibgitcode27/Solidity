{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror OwnerError();\n\ncontract FundMe{\n    using PriceConverter for uint256;\n\n    uint public constant minUSD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount in USD\n        // 1. How do we send ETH to this contract\n        // require(getConversionRate(msg.value) >= minUSD   , \"Didn't send enough\"); // \n        // Instead we can do \n        require(msg.value.getConversionRate(priceFeed) >= minUSD , \"Didn't send enough\"); // Using library function here\n        funders.push(msg.sender); \n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner{\n        // require(msg.sender == owner , \"Sender is not owner\");\n\n        for (uint funderIndex ; funderIndex < funders.length; funderIndex ++) \n        {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0; \n        }\n        // reset the array\n        funders = new address[](0);\n        // actually withdraw the funds\n        // transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // send \n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send Failed\");\n        // call\n        (bool callSuccess, /*bytes memory dataReturned*/) = payable(msg.sender).call{value : address(this).balance}(\"\");\n        require(callSuccess , \"Call Failed\");\n    }\n\n    modifier onlyOwner {\n        // require(msg.sender == owner , \"Sender is not owner\");\n        if(msg.sender != owner)\n        {\n            revert OwnerError();\n        }\n        _;\n    }\n\n    // What happens if someone sends ETH without calling any function\n\n    // Solidity has few special functions\n    // receive()\n    // fallabck()\n\n    receive() external payable {\n        fund();\n     }\n\n    fallback() external payable {\n        fund();\n     }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n\n// All functions should be internal in library\n\n    function getLivePrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n            // Two things we need\n            // ABI\n            // Address 0x694AA1769357215DE4FAC081bf1f309aDC325306 ETH/USD\n            (,int256 answer,,,) = priceFeed.latestRoundData(); // This will return price in USD\n            return uint256(answer * 1e10);\n    }\n\n    function getVersion() internal view returns(uint){\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n        return priceFeed.decimals();\n    }\n\n    function getConversionRate(uint ethAmount , AggregatorV3Interface priceFeed) internal view returns(uint){\n        uint ethprice = getLivePrice(priceFeed);\n        uint ethAmountInUsd = (ethAmount * ethprice) / 1e18; // (ethAmount * ethprice) will give a number with 32 decimal places so we divide it with 1e18\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}